#version 460

// flow.rs
#define MAX_SPAW 200
#define MAX_MANI 200
#define MAX_ACCU 200
#define MAX_FLOW 1000000

#define PI 3.141592653589793238

layout(local_size_x = 64) in;

float rand(float n){return fract(sin(n) * 43758.5453123);}

float noise(float p) {
    float fl = floor(p);
    float fc = fract(p);
    return mix(rand(fl), rand(fl + 1.0), fc);
}

/// Simplex 2D noise
/// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }

float snoise(vec2 v) {
    const vec4 C = vec4(
    0.211324865405187, 0.366025403784439,
    -0.577350269189626, 0.024390243902439);

    vec2 i  = floor(v + dot(v, C.yy) );
    vec2 x0 = v -   i + dot(i, C.xx);
    vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
    vec4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;
    i = mod(i, 289.0);
    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 ));
    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
    dot(x12.zw,x12.zw)), 0.0);
    m = m*m;
    m = m*m;
    vec3 x = 2.0 * fract(p * C.www) - 1.0;
    vec3 h = abs(x) - 0.5;
    vec3 ox = floor(x + 0.5);
    vec3 a0 = x - ox;
    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
    vec3 g;
    g.x  = a0.x  * x0.x  + h.x  * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    return 130.0 * dot(m, g);
}

/// Ref Particle in flow.rs
struct Particle {
    vec2  pos;
    vec2  vel;
};

struct Collider {
    float x;
    float y;
    float r2;
};

struct Manipulator {
    float acc;
    float spd;
    float rot;
};

struct SpawnerCollider {
    float rte;
};

struct Spawner {
    float x;
    float y;

    float scl;
    float var;

    float r;
    float g;
    float b;
};

struct Accumulator {
    float rte;
};

// Ref Uniforms in flow.rs
layout(std140, set = 0, binding = 0) uniform Uniforms {
    float dt;
    uint  ct;

    float flow_acc;
    float flow_jit;
    float flow_max;

    float flow_ext;
    float flow_scl;

    float coll_scl;

    uint  mani_ct;
    float mani_acc;
    float mani_spd;

    uint  spaw_ct;
    float spaw_rte;
    float spaw_scl;
    float spaw_var;

    uint  accu_ct;
    float accu_rte;
    float accu_scl;

    vec2  flow_off;
    vec3  spaw_col;
};
/// Ref Atomics in flow.rs
layout(set = 0, binding = 1) buffer Atomics {
    uint atom_ct; // Cleared to 0 every frame
};

/// Ref Particle in flow.rs
layout(set = 0, binding = 2) buffer SrcParticles {
    Particle src[MAX_FLOW];
};
layout(set = 0, binding = 3) buffer DstParticles {
    Particle dst[MAX_FLOW];
};

// Ref SpawnerCollider and Spawner in flow.rs
layout(binding = 4) buffer SpawnerColliders {
    SpawnerCollider spaw_coll[MAX_SPAW];
};
layout(binding = 5) buffer Spawners {
    Spawner spaw[MAX_SPAW];
};

/// Ref Collider and Manipulator in flow.rs
layout(binding = 6) buffer ManipulatorColliders {
    Collider mani_coll[MAX_MANI];
};
layout(binding = 7) buffer Manipulators {
    Manipulator mani[MAX_MANI];
};

/// Ref Collider and Accumulator in flow.rs
layout(binding = 8) buffer AccumulatorColliders {
    Collider accu_coll[MAX_ACCU];
};
layout(binding = 9) buffer Accumulators {
    Accumulator accu[MAX_ACCU];
};

// Check if we need to create a particle
// Increment atomic counter
// Check if we can be deleted then early return
// Move our particle
// Increment atomic counter
void main() {
    /*
    uint sflag = 0;
    // TODO: Finish this
    for(uint i = 0; i < spaw_ct; i++) {
        if(rand(i * 100) > spaw_coll[i].rte) {
            sflag = i;
            break;
        }
        // IF SOME CONDITION
        // SPAWN A PARTICLE
        // INCREMENT ATOMIC COUNTER
    }
    */

    uint idx = gl_GlobalInvocationID.x;
    if (idx >= ct) return;

    vec2 vpos = src[idx].pos;
    vec2 vvel = src[idx].vel;

    // COLLIDER -> vec2 & float -> pos & rad2
    uint flag = 0;
    for (uint i = 0; i < accu_ct; i++) {
        const vec2  coll_pos = vec2(accu_coll[i].x, accu_coll[i].y);
        const float coll_rad2 = accu_coll[i].r2;

        const float prod2 =
          ((coll_pos.x - vpos.x) * (coll_pos.x - vpos.x))
        + ((coll_pos.y - vpos.y) * (coll_pos.y - vpos.y));

        // Early return, effectively deleting the particle
        // TODO: Count this towards some objective, likely in a uniform
        if (prod2 < coll_rad2) {
            if(prod2 < coll_rad2 * 0.0625) { return; }
            const vec2 force_dir = -vec2(vpos.x - coll_pos.x, vpos.y - coll_pos.y);

            vvel += force_dir * dt;
            vpos += vvel * dt;

            // Really shitty speed capping, but it looks cool
            if (vvel.x >  flow_max) vvel.x =  flow_max;
            else if (vvel.x < -flow_max) vvel.x = -flow_max;
            if (vvel.y >  flow_max) vvel.y =  flow_max;
            else if (vvel.y < -flow_max) vvel.y = -flow_max;

            flag = 1;
        }
    }
    if(flag == 1) {
        idx = atomicAdd(atom_ct, 1);
        dst[idx].pos = vpos;
        dst[idx].vel = vvel;
        return;
    }

    // Flow field movement
    const float dir = snoise(vpos * flow_scl + flow_off) * 2.0 * PI; // 0 -> 2pi
    const vec2 vdir = vec2(sin(dir), cos(dir));
    vvel += vdir * flow_acc * dt;

    // Random position jitter
    vvel += (vec2(rand(vvel.x * 10.0), rand(vvel.y * 10.0)) - 0.5) * flow_jit * dt;
    vpos += vvel * dt;

    // Really shitty speed capping, but it looks cool
    if      (vvel.x >  flow_max) vvel.x =  flow_max;
    else if (vvel.x < -flow_max) vvel.x = -flow_max;
    if      (vvel.y >  flow_max) vvel.y =  flow_max;
    else if (vvel.y < -flow_max) vvel.y = -flow_max;

    // Position wrapping
    if (vpos.x < -flow_ext) vpos.x =  flow_ext;
    if (vpos.x >  flow_ext) vpos.x = -flow_ext;
    if (vpos.y < -flow_ext) vpos.y =  flow_ext;
    if (vpos.y >  flow_ext) vpos.y = -flow_ext;

    idx = atomicAdd(atom_ct, 1);
    dst[idx].pos = vpos;
    dst[idx].vel = vvel;
}
