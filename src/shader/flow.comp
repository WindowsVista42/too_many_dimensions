#version 460

#define MAX_FLOW 1000000
#define EXT 6.0
#define INNER_EXT 2.0
#define MAX_SPEED 0.5
#define ACCEL 1.3
#define INNER_ACCEL 1.5
#define PI 3.141592653589793238
#define SCALE 0.5
#define OFFSET vec2(123.0, 934.0)

layout(local_size_x = 64) in;

float rand(float n){return fract(sin(n) * 43758.5453123);}

float noise(float p) {
    float fl = floor(p);
    float fc = fract(p);
    return mix(rand(fl), rand(fl + 1.0), fc);
}

// Simplex 2D noise
vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }

float snoise(vec2 v) {
    const vec4 C = vec4(
    0.211324865405187, 0.366025403784439,
    -0.577350269189626, 0.024390243902439);

    vec2 i  = floor(v + dot(v, C.yy) );
    vec2 x0 = v -   i + dot(i, C.xx);
    vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
    vec4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;
    i = mod(i, 289.0);
    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 ));
    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
    dot(x12.zw,x12.zw)), 0.0);
    m = m*m;
    m = m*m;
    vec3 x = 2.0 * fract(p * C.www) - 1.0;
    vec3 h = abs(x) - 0.5;
    vec3 ox = floor(x + 0.5);
    vec3 a0 = x - ox;
    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
    vec3 g;
    g.x  = a0.x  * x0.x  + h.x  * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    return 130.0 * dot(m, g);
}

// Ref Particle in flow.rs
struct Particle {
    vec2  pos;
    vec2  vel;
};

struct Collider {
    vec2  pos;
    float rad;
};

struct Manipulator {
    float acc;
    float spd;
    float rot;
};

struct Spawner {
    vec2  pos;
    float rad;
    float rte;
    float scl;
    float var;
    float col;
};

struct Accumulator {
    float rte;
};

// Ref Uniforms in flow.rs
layout(set = 0, binding = 0) uniform Uniforms {
    float dt;
    uint  ct;

    float part_ext;
    float part_acc;
    float part_max;

    float flow_scl;
    float flow_off;

    float coll_scl;

    float mani_acc;
    float mani_spd;

    float spaw_rte;
    float spaw_scl;
    float spaw_var;
    vec3  spaw_col;

    float accu_rte;
};

// Ref Atomics in flow.rs
layout(set = 0, binding = 1) buffer Atomics {
    uint atomic_count;
};

layout(set = 0, binding = 2) buffer SrcParticles {
    Particle src[MAX_FLOW];
};
layout(set = 0, binding = 3) buffer DstParticles {
    Particle dst[MAX_FLOW];
};

void main() {
    uint idx = gl_GlobalInvocationID.x;
    if (idx > ct) { return; }
    atomicAdd(atomic_count, 1);

    vec2 vpos = src[idx].pos;
    vec2 vvel = src[idx].vel;

    vec2 vdir;
    /*
    if (vpos.x <  INNER_EXT &&
        vpos.x > -INNER_EXT &&
        vpos.y <  INNER_EXT &&
        vpos.y > -INNER_EXT
    ) {
        vvel += vec2(-MAX_SPEED, -MAX_SPEED) * u_dt * INNER_ACCEL;
    } if {
    */
        float dir = snoise(vpos * SCALE + OFFSET) * PI * 2.0;// 0 -> 2pi
        vdir = vec2(sin(dir), cos(dir));
        vvel += vdir * ACCEL * dt;
    //}

    vvel += (vec2(rand(vvel.x * 10.0), rand(vvel.y * 10.0)) - 0.5) * 1.2 * dt;
    vpos += vvel * dt;

    if      (vvel.x >  MAX_SPEED) vvel.x =  MAX_SPEED;
    else if (vvel.x < -MAX_SPEED) vvel.x = -MAX_SPEED;
    if      (vvel.y >  MAX_SPEED) vvel.y =  MAX_SPEED;
    else if (vvel.y < -MAX_SPEED) vvel.y = -MAX_SPEED;

    if (vpos.x < -EXT) vpos.x =  EXT;
    if (vpos.x >  EXT) vpos.x = -EXT;
    if (vpos.y < -EXT) vpos.y =  EXT;
    if (vpos.y >  EXT) vpos.y = -EXT;

    dst[idx].pos = vpos;
    dst[idx].vel = vvel;
}
